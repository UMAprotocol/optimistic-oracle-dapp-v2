/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Provider } from "@ethersproject/providers";

export declare namespace OptimisticOracleV2Interface {
  export type RequestSettingsStruct = {
    eventBased: boolean;
    refundOnDispute: boolean;
    callbackOnPriceProposed: boolean;
    callbackOnPriceDisputed: boolean;
    callbackOnPriceSettled: boolean;
    bond: BigNumberish;
    customLiveness: BigNumberish;
  };

  export type RequestSettingsStructOutput = [
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
  ] & {
    eventBased: boolean;
    refundOnDispute: boolean;
    callbackOnPriceProposed: boolean;
    callbackOnPriceDisputed: boolean;
    callbackOnPriceSettled: boolean;
    bond: BigNumber;
    customLiveness: BigNumber;
  };

  export type RequestStruct = {
    proposer: string;
    disputer: string;
    currency: string;
    settled: boolean;
    requestSettings: OptimisticOracleV2Interface.RequestSettingsStruct;
    proposedPrice: BigNumberish;
    resolvedPrice: BigNumberish;
    expirationTime: BigNumberish;
    reward: BigNumberish;
    finalFee: BigNumberish;
  };

  export type RequestStructOutput = [
    string,
    string,
    string,
    boolean,
    OptimisticOracleV2Interface.RequestSettingsStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    proposer: string;
    disputer: string;
    currency: string;
    settled: boolean;
    requestSettings: OptimisticOracleV2Interface.RequestSettingsStructOutput;
    proposedPrice: BigNumber;
    resolvedPrice: BigNumber;
    expirationTime: BigNumber;
    reward: BigNumber;
    finalFee: BigNumber;
  };
}

export declare namespace ManagedOptimisticOracleV2 {
  export type BondStruct = { currency: string; amount: BigNumberish };

  export type BondStructOutput = [string, BigNumber] & {
    currency: string;
    amount: BigNumber;
  };
}

export interface ManagedOptimisticOracleV2Interface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OO_ANCILLARY_DATA_LIMIT()": FunctionFragment;
    "REQUEST_MANAGER()": FunctionFragment;
    "TOO_EARLY_RESPONSE()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "acceptDefaultAdminTransfer()": FunctionFragment;
    "addRequestManager(address)": FunctionFragment;
    "ancillaryBytesLimit()": FunctionFragment;
    "beginDefaultAdminTransfer(address)": FunctionFragment;
    "cancelDefaultAdminTransfer()": FunctionFragment;
    "changeDefaultAdminDelay(uint48)": FunctionFragment;
    "customBonds(bytes32,address)": FunctionFragment;
    "customLivenessValues(bytes32)": FunctionFragment;
    "customProposerWhitelists(bytes32)": FunctionFragment;
    "defaultAdmin()": FunctionFragment;
    "defaultAdminDelay()": FunctionFragment;
    "defaultAdminDelayIncreaseWait()": FunctionFragment;
    "defaultLiveness()": FunctionFragment;
    "defaultProposerWhitelist()": FunctionFragment;
    "disputePrice(address,bytes32,uint256,bytes)": FunctionFragment;
    "disputePriceFor(address,address,bytes32,uint256,bytes)": FunctionFragment;
    "finder()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getCustomProposerWhitelist(address,bytes32,bytes)": FunctionFragment;
    "getManagedRequestId(address,bytes32,bytes)": FunctionFragment;
    "getProposerWhitelistWithEnabledStatus(address,bytes32,bytes)": FunctionFragment;
    "getRequest(address,bytes32,uint256,bytes)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getState(address,bytes32,uint256,bytes)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasPrice(address,bytes32,uint256,bytes)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint256,address,address,address,address,(address,uint256)[],uint256,address)": FunctionFragment;
    "initialize(uint256,address,address)": FunctionFragment;
    "maximumBonds(address)": FunctionFragment;
    "minimumLiveness()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingDefaultAdmin()": FunctionFragment;
    "pendingDefaultAdminDelay()": FunctionFragment;
    "proposePrice(address,bytes32,uint256,bytes,int256)": FunctionFragment;
    "proposePriceFor(address,address,bytes32,uint256,bytes,int256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeRequestManager(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestManagerSetBond(address,bytes32,bytes,address,uint256)": FunctionFragment;
    "requestManagerSetCustomLiveness(address,bytes32,bytes,uint256)": FunctionFragment;
    "requestManagerSetProposerWhitelist(address,bytes32,bytes,address)": FunctionFragment;
    "requestPrice(bytes32,uint256,bytes,address,uint256)": FunctionFragment;
    "requesterWhitelist()": FunctionFragment;
    "requests(bytes32)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rollbackDefaultAdminDelay()": FunctionFragment;
    "setBond(bytes32,uint256,bytes,uint256)": FunctionFragment;
    "setCallbacks(bytes32,uint256,bytes,bool,bool,bool)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "setCustomLiveness(bytes32,uint256,bytes,uint256)": FunctionFragment;
    "setDefaultProposerWhitelist(address)": FunctionFragment;
    "setEventBased(bytes32,uint256,bytes)": FunctionFragment;
    "setMaximumBond(address,uint256)": FunctionFragment;
    "setMinimumLiveness(uint256)": FunctionFragment;
    "setRefundOnDispute(bytes32,uint256,bytes)": FunctionFragment;
    "setRequesterWhitelist(address)": FunctionFragment;
    "settle(address,bytes32,uint256,bytes)": FunctionFragment;
    "settleAndGetPrice(bytes32,uint256,bytes)": FunctionFragment;
    "stampAncillaryData(bytes,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "OO_ANCILLARY_DATA_LIMIT"
      | "REQUEST_MANAGER"
      | "TOO_EARLY_RESPONSE"
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptDefaultAdminTransfer"
      | "addRequestManager"
      | "ancillaryBytesLimit"
      | "beginDefaultAdminTransfer"
      | "cancelDefaultAdminTransfer"
      | "changeDefaultAdminDelay"
      | "customBonds"
      | "customLivenessValues"
      | "customProposerWhitelists"
      | "defaultAdmin"
      | "defaultAdminDelay"
      | "defaultAdminDelayIncreaseWait"
      | "defaultLiveness"
      | "defaultProposerWhitelist"
      | "disputePrice"
      | "disputePriceFor"
      | "finder"
      | "getCurrentTime"
      | "getCustomProposerWhitelist"
      | "getManagedRequestId"
      | "getProposerWhitelistWithEnabledStatus"
      | "getRequest"
      | "getRoleAdmin"
      | "getState"
      | "grantRole"
      | "hasPrice"
      | "hasRole"
      | "initialize(uint256,address,address,address,address,(address,uint256)[],uint256,address)"
      | "initialize(uint256,address,address)"
      | "maximumBonds"
      | "minimumLiveness"
      | "multicall"
      | "owner"
      | "pendingDefaultAdmin"
      | "pendingDefaultAdminDelay"
      | "proposePrice"
      | "proposePriceFor"
      | "proxiableUUID"
      | "removeRequestManager"
      | "renounceRole"
      | "requestManagerSetBond"
      | "requestManagerSetCustomLiveness"
      | "requestManagerSetProposerWhitelist"
      | "requestPrice"
      | "requesterWhitelist"
      | "requests"
      | "revokeRole"
      | "rollbackDefaultAdminDelay"
      | "setBond"
      | "setCallbacks"
      | "setCurrentTime"
      | "setCustomLiveness"
      | "setDefaultProposerWhitelist"
      | "setEventBased"
      | "setMaximumBond"
      | "setMinimumLiveness"
      | "setRefundOnDispute"
      | "setRequesterWhitelist"
      | "settle"
      | "settleAndGetPrice"
      | "stampAncillaryData"
      | "supportsInterface"
      | "timerAddress"
      | "upgradeToAndCall",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "OO_ANCILLARY_DATA_LIMIT",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "REQUEST_MANAGER",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "TOO_EARLY_RESPONSE",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "acceptDefaultAdminTransfer",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "addRequestManager",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "ancillaryBytesLimit",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "beginDefaultAdminTransfer",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDefaultAdminTransfer",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "changeDefaultAdminDelay",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "customBonds",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "customLivenessValues",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "customProposerWhitelists",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAdmin",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAdminDelay",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAdminDelayIncreaseWait",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "defaultLiveness",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "defaultProposerWhitelist",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "disputePrice",
    values: [string, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "disputePriceFor",
    values: [string, string, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomProposerWhitelist",
    values: [string, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getManagedRequestId",
    values: [string, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getProposerWhitelistWithEnabledStatus",
    values: [string, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [string, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [string, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "hasPrice",
    values: [string, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(uint256,address,address,address,address,(address,uint256)[],uint256,address)",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      ManagedOptimisticOracleV2.BondStruct[],
      BigNumberish,
      string,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(uint256,address,address)",
    values: [BigNumberish, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "maximumBonds",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "minimumLiveness",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingDefaultAdmin",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "pendingDefaultAdminDelay",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "proposePrice",
    values: [string, BytesLike, BigNumberish, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "proposePriceFor",
    values: [string, string, BytesLike, BigNumberish, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "removeRequestManager",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "requestManagerSetBond",
    values: [string, BytesLike, BytesLike, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "requestManagerSetCustomLiveness",
    values: [string, BytesLike, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "requestManagerSetProposerWhitelist",
    values: [string, BytesLike, BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [BytesLike, BigNumberish, BytesLike, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "requesterWhitelist",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "requests", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "rollbackDefaultAdminDelay",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setBond",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setCallbacks",
    values: [BytesLike, BigNumberish, BytesLike, boolean, boolean, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomLiveness",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultProposerWhitelist",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "setEventBased",
    values: [BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumBond",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumLiveness",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundOnDispute",
    values: [BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setRequesterWhitelist",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [string, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "settleAndGetPrice",
    values: [BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "stampAncillaryData",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "OO_ANCILLARY_DATA_LIMIT",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "REQUEST_MANAGER",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOO_EARLY_RESPONSE",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptDefaultAdminTransfer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRequestManager",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "ancillaryBytesLimit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginDefaultAdminTransfer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDefaultAdminTransfer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDefaultAdminDelay",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "customBonds",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "customLivenessValues",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "customProposerWhitelists",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAdmin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAdminDelay",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAdminDelayIncreaseWait",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultLiveness",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultProposerWhitelist",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputePrice",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputePriceFor",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomProposerWhitelist",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagedRequestId",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposerWhitelistWithEnabledStatus",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(uint256,address,address,address,address,(address,uint256)[],uint256,address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(uint256,address,address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumBonds",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumLiveness",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDefaultAdmin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingDefaultAdminDelay",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposePrice",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposePriceFor",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRequestManager",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestManagerSetBond",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestManagerSetCustomLiveness",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestManagerSetProposerWhitelist",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "requesterWhitelist",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rollbackDefaultAdminDelay",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "setBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCallbacks",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomLiveness",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultProposerWhitelist",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventBased",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumBond",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumLiveness",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundOnDispute",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequesterWhitelist",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleAndGetPrice",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "stampAncillaryData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike,
  ): Result;

  events: {
    "CustomBondSet(bytes32,address,bytes32,bytes,address,uint256)": EventFragment;
    "CustomLivenessSet(bytes32,address,bytes32,bytes,uint256)": EventFragment;
    "CustomProposerWhitelistSet(bytes32,address,bytes32,bytes,address)": EventFragment;
    "DefaultAdminDelayChangeCanceled()": EventFragment;
    "DefaultAdminDelayChangeScheduled(uint48,uint48)": EventFragment;
    "DefaultAdminTransferCanceled()": EventFragment;
    "DefaultAdminTransferScheduled(address,uint48)": EventFragment;
    "DefaultProposerWhitelistUpdated(address)": EventFragment;
    "DisputePrice(address,address,address,bytes32,uint256,bytes,int256)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "MaximumBondUpdated(address,uint256)": EventFragment;
    "MinimumLivenessUpdated(uint256)": EventFragment;
    "ProposePrice(address,address,bytes32,uint256,bytes,int256,uint256,address)": EventFragment;
    "RequestManagerAdded(address)": EventFragment;
    "RequestManagerRemoved(address)": EventFragment;
    "RequestPrice(address,bytes32,uint256,bytes,address,uint256,uint256)": EventFragment;
    "RequesterWhitelistUpdated(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Settle(address,address,address,bytes32,uint256,bytes,int256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CustomBondSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CustomLivenessSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CustomProposerWhitelistSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultAdminDelayChangeCanceled",
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultAdminDelayChangeScheduled",
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultAdminTransferCanceled",
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultAdminTransferScheduled",
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultProposerWhitelistUpdated",
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaximumBondUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumLivenessUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestManagerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequesterWhitelistUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface CustomBondSetEventObject {
  managedRequestId: string;
  requester: string;
  identifier: string;
  ancillaryData: string;
  currency: string;
  bond: BigNumber;
}

export interface CustomLivenessSetEventObject {
  managedRequestId: string;
  requester: string;
  identifier: string;
  ancillaryData: string;
  customLiveness: BigNumber;
}

export interface CustomProposerWhitelistSetEventObject {
  managedRequestId: string;
  requester: string;
  identifier: string;
  ancillaryData: string;
  newWhitelist: string;
}

export interface DefaultAdminDelayChangeScheduledEventObject {
  newDelay: number;
  effectSchedule: number;
}

export interface DefaultAdminTransferScheduledEventObject {
  newAdmin: string;
  acceptSchedule: number;
}

export interface DisputePriceEventObject {
  requester: string;
  proposer: string;
  disputer: string;
  identifier: string;
  timestamp: BigNumber;
  ancillaryData: string;
  proposedPrice: BigNumber;
}
export interface MaximumBondUpdatedEventObject {
  currency: string;
  newMaximumBond: BigNumber;
}
export interface ProposePriceEventObject {
  requester: string;
  proposer: string;
  identifier: string;
  timestamp: BigNumber;
  ancillaryData: string;
  proposedPrice: BigNumber;
  expirationTimestamp: BigNumber;
  currency: string;
}
export interface RequestManagerAddedEventObject {
  requestManager: string;
}
export interface RequestManagerRemovedEventObject {
  requestManager: string;
}

export interface RequestPriceEventObject {
  requester: string;
  identifier: string;
  timestamp: BigNumber;
  ancillaryData: string;
  currency: string;
  reward: BigNumber;
  finalFee: BigNumber;
}
export interface RequesterWhitelistUpdatedEventObject {
  newWhitelist: string;
}
export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export interface SettleEventObject {
  requester: string;
  proposer: string;
  disputer: string;
  identifier: string;
  timestamp: BigNumber;
  ancillaryData: string;
  price: BigNumber;
  payout: BigNumber;
}
export interface UpgradedEventObject {
  implementation: string;
}
export interface ManagedOptimisticOracleV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManagedOptimisticOracleV2Interface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OO_ANCILLARY_DATA_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    REQUEST_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    TOO_EARLY_RESPONSE(overrides?: CallOverrides): Promise<[BigNumber]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    acceptDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    addRequestManager(
      requestManager: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    beginDefaultAdminTransfer(
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    cancelDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    changeDefaultAdminDelay(
      newDelay: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    customBonds(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { amount: BigNumber; isSet: boolean }>;

    customLivenessValues(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { liveness: BigNumber; isSet: boolean }>;

    customProposerWhitelists(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    defaultAdmin(overrides?: CallOverrides): Promise<[string]>;

    defaultAdminDelay(overrides?: CallOverrides): Promise<[number]>;

    defaultAdminDelayIncreaseWait(overrides?: CallOverrides): Promise<[number]>;

    defaultLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultProposerWhitelist(overrides?: CallOverrides): Promise<[string]>;

    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCustomProposerWhitelist(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getManagedRequestId(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getProposerWhitelistWithEnabledStatus(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [string[], boolean] & { allowedProposers: string[]; isEnforced: boolean }
    >;

    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[OptimisticOracleV2Interface.RequestStructOutput]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    "initialize(uint256,address,address,address,address,(address,uint256)[],uint256,address)"(
      _liveness: BigNumberish,
      _finderAddress: string,
      _timerAddress: string,
      _defaultProposerWhitelist: string,
      _requesterWhitelist: string,
      _maximumBonds: ManagedOptimisticOracleV2.BondStruct[],
      _minimumLiveness: BigNumberish,
      _admin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    "initialize(uint256,address,address)"(
      _liveness: BigNumberish,
      _finderAddress: string,
      _timerAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    maximumBonds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingDefaultAdmin(
      overrides?: CallOverrides,
    ): Promise<[string, number] & { newAdmin: string; schedule: number }>;

    pendingDefaultAdminDelay(
      overrides?: CallOverrides,
    ): Promise<[number, number] & { newDelay: number; schedule: number }>;

    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeRequestManager(
      requestManager: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    requestManagerSetBond(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      currency: string,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    requestManagerSetCustomLiveness(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    requestManagerSetProposerWhitelist(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      whitelist: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    requesterWhitelist(overrides?: CallOverrides): Promise<[string]>;

    requests(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        OptimisticOracleV2Interface.RequestSettingsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: OptimisticOracleV2Interface.RequestSettingsStructOutput;
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
      }
    >;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    rollbackDefaultAdminDelay(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setCallbacks(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      callbackOnPriceProposed: boolean,
      callbackOnPriceDisputed: boolean,
      callbackOnPriceSettled: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setDefaultProposerWhitelist(
      whitelist: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setEventBased(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setMaximumBond(
      currency: string,
      maximumBond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setMinimumLiveness(
      _minimumLiveness: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setRequesterWhitelist(
      whitelist: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OO_ANCILLARY_DATA_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  REQUEST_MANAGER(overrides?: CallOverrides): Promise<string>;

  TOO_EARLY_RESPONSE(overrides?: CallOverrides): Promise<BigNumber>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  acceptDefaultAdminTransfer(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  addRequestManager(
    requestManager: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

  beginDefaultAdminTransfer(
    newAdmin: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  cancelDefaultAdminTransfer(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  changeDefaultAdminDelay(
    newDelay: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  customBonds(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, boolean] & { amount: BigNumber; isSet: boolean }>;

  customLivenessValues(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, boolean] & { liveness: BigNumber; isSet: boolean }>;

  customProposerWhitelists(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  defaultAdmin(overrides?: CallOverrides): Promise<string>;

  defaultAdminDelay(overrides?: CallOverrides): Promise<number>;

  defaultAdminDelayIncreaseWait(overrides?: CallOverrides): Promise<number>;

  defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  defaultProposerWhitelist(overrides?: CallOverrides): Promise<string>;

  disputePrice(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  disputePriceFor(
    disputer: string,
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  finder(overrides?: CallOverrides): Promise<string>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getCustomProposerWhitelist(
    requester: string,
    identifier: BytesLike,
    ancillaryData: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  getManagedRequestId(
    requester: string,
    identifier: BytesLike,
    ancillaryData: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  getProposerWhitelistWithEnabledStatus(
    requester: string,
    identifier: BytesLike,
    ancillaryData: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [string[], boolean] & { allowedProposers: string[]; isEnforced: boolean }
  >;

  getRequest(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides,
  ): Promise<OptimisticOracleV2Interface.RequestStructOutput>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getState(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides,
  ): Promise<number>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  hasPrice(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  "initialize(uint256,address,address,address,address,(address,uint256)[],uint256,address)"(
    _liveness: BigNumberish,
    _finderAddress: string,
    _timerAddress: string,
    _defaultProposerWhitelist: string,
    _requesterWhitelist: string,
    _maximumBonds: ManagedOptimisticOracleV2.BondStruct[],
    _minimumLiveness: BigNumberish,
    _admin: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  "initialize(uint256,address,address)"(
    _liveness: BigNumberish,
    _finderAddress: string,
    _timerAddress: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  maximumBonds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minimumLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingDefaultAdmin(
    overrides?: CallOverrides,
  ): Promise<[string, number] & { newAdmin: string; schedule: number }>;

  pendingDefaultAdminDelay(
    overrides?: CallOverrides,
  ): Promise<[number, number] & { newDelay: number; schedule: number }>;

  proposePrice(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    proposedPrice: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  proposePriceFor(
    proposer: string,
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    proposedPrice: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeRequestManager(
    requestManager: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  requestManagerSetBond(
    requester: string,
    identifier: BytesLike,
    ancillaryData: BytesLike,
    currency: string,
    bond: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  requestManagerSetCustomLiveness(
    requester: string,
    identifier: BytesLike,
    ancillaryData: BytesLike,
    customLiveness: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  requestManagerSetProposerWhitelist(
    requester: string,
    identifier: BytesLike,
    ancillaryData: BytesLike,
    whitelist: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  requestPrice(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    currency: string,
    reward: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  requesterWhitelist(overrides?: CallOverrides): Promise<string>;

  requests(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      OptimisticOracleV2Interface.RequestSettingsStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
    ] & {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      requestSettings: OptimisticOracleV2Interface.RequestSettingsStructOutput;
      proposedPrice: BigNumber;
      resolvedPrice: BigNumber;
      expirationTime: BigNumber;
      reward: BigNumber;
      finalFee: BigNumber;
    }
  >;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  rollbackDefaultAdminDelay(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setBond(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    bond: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setCallbacks(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    callbackOnPriceProposed: boolean,
    callbackOnPriceDisputed: boolean,
    callbackOnPriceSettled: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setCustomLiveness(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    customLiveness: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setDefaultProposerWhitelist(
    whitelist: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setEventBased(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setMaximumBond(
    currency: string,
    maximumBond: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setMinimumLiveness(
    _minimumLiveness: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setRefundOnDispute(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setRequesterWhitelist(
    whitelist: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  settle(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  settleAndGetPrice(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  stampAncillaryData(
    ancillaryData: BytesLike,
    requester: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OO_ANCILLARY_DATA_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    REQUEST_MANAGER(overrides?: CallOverrides): Promise<string>;

    TOO_EARLY_RESPONSE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    acceptDefaultAdminTransfer(overrides?: CallOverrides): Promise<void>;

    addRequestManager(
      requestManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    beginDefaultAdminTransfer(
      newAdmin: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    cancelDefaultAdminTransfer(overrides?: CallOverrides): Promise<void>;

    changeDefaultAdminDelay(
      newDelay: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    customBonds(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { amount: BigNumber; isSet: boolean }>;

    customLivenessValues(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { liveness: BigNumber; isSet: boolean }>;

    customProposerWhitelists(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    defaultAdmin(overrides?: CallOverrides): Promise<string>;

    defaultAdminDelay(overrides?: CallOverrides): Promise<number>;

    defaultAdminDelayIncreaseWait(overrides?: CallOverrides): Promise<number>;

    defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    defaultProposerWhitelist(overrides?: CallOverrides): Promise<string>;

    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<string>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getCustomProposerWhitelist(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    getManagedRequestId(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    getProposerWhitelistWithEnabledStatus(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [string[], boolean] & { allowedProposers: string[]; isEnforced: boolean }
    >;

    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<OptimisticOracleV2Interface.RequestStructOutput>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<number>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    "initialize(uint256,address,address,address,address,(address,uint256)[],uint256,address)"(
      _liveness: BigNumberish,
      _finderAddress: string,
      _timerAddress: string,
      _defaultProposerWhitelist: string,
      _requesterWhitelist: string,
      _maximumBonds: ManagedOptimisticOracleV2.BondStruct[],
      _minimumLiveness: BigNumberish,
      _admin: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "initialize(uint256,address,address)"(
      _liveness: BigNumberish,
      _finderAddress: string,
      _timerAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    maximumBonds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minimumLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingDefaultAdmin(
      overrides?: CallOverrides,
    ): Promise<[string, number] & { newAdmin: string; schedule: number }>;

    pendingDefaultAdminDelay(
      overrides?: CallOverrides,
    ): Promise<[number, number] & { newDelay: number; schedule: number }>;

    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeRequestManager(
      requestManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    requestManagerSetBond(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      currency: string,
      bond: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    requestManagerSetCustomLiveness(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    requestManagerSetProposerWhitelist(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      whitelist: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    requesterWhitelist(overrides?: CallOverrides): Promise<string>;

    requests(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        OptimisticOracleV2Interface.RequestSettingsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: OptimisticOracleV2Interface.RequestSettingsStructOutput;
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
      }
    >;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    rollbackDefaultAdminDelay(overrides?: CallOverrides): Promise<void>;

    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setCallbacks(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      callbackOnPriceProposed: boolean,
      callbackOnPriceDisputed: boolean,
      callbackOnPriceSettled: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDefaultProposerWhitelist(
      whitelist: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setEventBased(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaximumBond(
      currency: string,
      maximumBond: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMinimumLiveness(
      _minimumLiveness: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRequesterWhitelist(
      whitelist: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OO_ANCILLARY_DATA_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    REQUEST_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    TOO_EARLY_RESPONSE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    addRequestManager(
      requestManager: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    beginDefaultAdminTransfer(
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    cancelDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    changeDefaultAdminDelay(
      newDelay: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    customBonds(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    customLivenessValues(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    customProposerWhitelists(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    defaultAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    defaultAdminDelay(overrides?: CallOverrides): Promise<BigNumber>;

    defaultAdminDelayIncreaseWait(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    defaultProposerWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getCustomProposerWhitelist(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getManagedRequestId(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getProposerWhitelistWithEnabledStatus(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "initialize(uint256,address,address,address,address,(address,uint256)[],uint256,address)"(
      _liveness: BigNumberish,
      _finderAddress: string,
      _timerAddress: string,
      _defaultProposerWhitelist: string,
      _requesterWhitelist: string,
      _maximumBonds: ManagedOptimisticOracleV2.BondStruct[],
      _minimumLiveness: BigNumberish,
      _admin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    "initialize(uint256,address,address)"(
      _liveness: BigNumberish,
      _finderAddress: string,
      _timerAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    maximumBonds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minimumLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDefaultAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDefaultAdminDelay(overrides?: CallOverrides): Promise<BigNumber>;

    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeRequestManager(
      requestManager: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    requestManagerSetBond(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      currency: string,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    requestManagerSetCustomLiveness(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    requestManagerSetProposerWhitelist(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      whitelist: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    requesterWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    requests(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    rollbackDefaultAdminDelay(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setCallbacks(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      callbackOnPriceProposed: boolean,
      callbackOnPriceDisputed: boolean,
      callbackOnPriceSettled: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setDefaultProposerWhitelist(
      whitelist: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setEventBased(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setMaximumBond(
      currency: string,
      maximumBond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setMinimumLiveness(
      _minimumLiveness: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setRequesterWhitelist(
      whitelist: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    OO_ANCILLARY_DATA_LIMIT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    REQUEST_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOO_EARLY_RESPONSE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    acceptDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    addRequestManager(
      requestManager: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    ancillaryBytesLimit(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    beginDefaultAdminTransfer(
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    cancelDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    changeDefaultAdminDelay(
      newDelay: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    customBonds(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    customLivenessValues(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    customProposerWhitelists(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    defaultAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultAdminDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultAdminDelayIncreaseWait(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    defaultLiveness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultProposerWhitelist(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCustomProposerWhitelist(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getManagedRequestId(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProposerWhitelistWithEnabledStatus(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,address,address,address,address,(address,uint256)[],uint256,address)"(
      _liveness: BigNumberish,
      _finderAddress: string,
      _timerAddress: string,
      _defaultProposerWhitelist: string,
      _requesterWhitelist: string,
      _maximumBonds: ManagedOptimisticOracleV2.BondStruct[],
      _minimumLiveness: BigNumberish,
      _admin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,address,address)"(
      _liveness: BigNumberish,
      _finderAddress: string,
      _timerAddress: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    maximumBonds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    minimumLiveness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDefaultAdmin(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pendingDefaultAdminDelay(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRequestManager(
      requestManager: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    requestManagerSetBond(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      currency: string,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    requestManagerSetCustomLiveness(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    requestManagerSetProposerWhitelist(
      requester: string,
      identifier: BytesLike,
      ancillaryData: BytesLike,
      whitelist: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    requesterWhitelist(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    rollbackDefaultAdminDelay(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setCallbacks(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      callbackOnPriceProposed: boolean,
      callbackOnPriceDisputed: boolean,
      callbackOnPriceSettled: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setDefaultProposerWhitelist(
      whitelist: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setEventBased(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setMaximumBond(
      currency: string,
      maximumBond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setMinimumLiveness(
      _minimumLiveness: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setRequesterWhitelist(
      whitelist: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
